
name: ESP32 S2

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule
on:
  pull_request:
    paths:
      - '.github/workflows/build_esp32s2.yml'
      - "micropython-modules/microlite/**"
      - "micropython-modules/micropython-camera-driver/**"

jobs:
  tensorflow_micropython_esp32_s2_build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Prepare to Build Tensorflow Micropython Firmware for ESP32
        run: |
          git submodule init
          git submodule update --recursive
          cd micropython
          git submodule update --init lib/axtls
          git submodule update --init lib/berkeley-db-1.xx
          cd ports/esp32
          make BOARD= submodules
          cd ../../..
          cd tflm_esp_kernels
          git submodule update --init components/esp32-camera
          git submodule update --init components/esp-nn
      - name: Get Cache Keys
        # later get this like this: git ls-remote --heads https://github.com/espressif/esp-idf
        # this commit is hard-coded in micropython/tools/ci.sh
        run: |
          IDF_COMMIT=5bb59b00e72f8f91eb24d8c65bf9a7ea2b8a4f5f
          echo "esp-idf-commit=$IDF_COMMIT" >> $GITHUB_ENV
          TFLM_COMMIT=$(git submodule status tensorflow | awk '{print ($1)}')
          echo "tflm-commit=$TFLM_COMMIT" >> $GITHUB_ENV
#      - name: Cache esp-idf
#        id: cache-esp-idf
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-esp-idf
#        with:
#          path: ./esp-idf
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.esp-idf-commit }}
      - name: Setup IDF
#        if: steps.cache-esp-idf.outputs.cache-hit != 'true'
        run: |
          source ./micropython/tools/ci.sh && ci_esp32_idf44_setup
      - name: Cache tflm
        id: cache-tflm
        uses: actions/cache@v2
        env:
          cache-name: cache-tflm
        with:
          path: ./micropython-modules/microlite/tflm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.tflm-commit }}
      - name: Setup Build for Tensorflow
        if: steps.cache-tflm.outputs.cache-hit != 'true'
        run: |

          source ./esp-idf/export.sh

          pip3 install Pillow
          pip3 install Wave

          echo "Regenerating microlite/tfm directory"
          rm -rf ./micropython-modules/microlite/tflm

          cd ./tensorflow

          ../micropython-modules/microlite/prepare-tflm-esp.sh

      - name: Build micropython cross compiler
        run:  |
          source ./esp-idf/export.sh
          cd ./micropython
          echo "make -C mpy-cross V=1 clean all"
          make -C mpy-cross V=1 clean all

      - name: Build ESP32 S2 with SPIRAM
        run: |

          source ./esp-idf/export.sh

          echo "cd ./boards/esp32/MICROLITE_S2_SPIRAM"
          cd ./boards/esp32/MICROLITE_S2_SPIRAM

          echo "Building ESP32 MICROLITE_S2_SPIRAM"
          rm -rf builds
          idf.py clean build

          ../../../micropython-modules/microlite/assemble-unified-image-esp.sh \
          ../../../micropython/ports/esp32

      - name: Archive ESP32-MICROLITE_S2_SPIRAM firmware
        uses: actions/upload-artifact@v2
        with:
          name: microlite-esp32s2-spiram-firmware
          path: |
            boards/esp32/MICROLITE_S2_SPIRAM/build/firmware.bin

